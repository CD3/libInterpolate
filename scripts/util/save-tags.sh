#! /bin/bash

# the getopt command is external to the shell. essentially what it
# does is parse the command line parameters and rearrange them so
# that all of the options are given before any of the arguments, and
# adds a '--' between the options and arguments. 
# then you can setup a while loop to process options easily and terminate
# it when you run into the '--'

# both long and short options can be given
# short options are passed to -o
# long  options are passed to -l
# a colon (:) after an option means it has a required argument
# two colons (::) after an option means it has a optional argument


NEW_COMMAND_LINE=$(getopt -o p::b:: -l pattern::,branch:: -n '$(basename $0)' -- "$@")   # this creates a rearranged version of the command line
if [ $? != 0 ] ; then echo "getopt returned an error, Terminating..." >&2 ; exit 1 ; fi
eval set -- "$NEW_COMMAND_LINE"                                                                          # this sets up positional parameters to the new command line


# now we can just manually loop through the positional parameters
pattern='.*'
branch='master'
while true ; do
  case "$1" in
    -p|--pattern)
        pattern=$2
        shift 2
        ;;
    -b|--branch)
        branch=$2
        shift 2
        ;;
    --) shift ; break ;;
     *) echo "Unreconized option got through: '$1'" ; exit 1 ;;
  esac
done
echo "p:${pattern}"
echo "b:${branch}"

# arguments start at $1...
tagfile=${1:-/dev/stdout}
shift


echo "" > $tagfile
echo "# automatically generated by $0" >> $tagfile
echo "# this is just a list of the tags that have been applied to the ${branch} branch" >> $tagfile
echo "# incase something terrible happens and the tags are lost." >> $tagfile
echo "# use the retag.sh script to reapply these tags if needed." >> $tagfile

#git log --simplify-by-decoration --decorate --pretty=oneline ${branch} | fgrep 'tag: ' | sed "s/ (.*tag: /-/"  | sed "s/[,)] .*$//" | sed "s/-/ /"  >> $tagfile
for tag in $(git tag --merged "${branch}" | grep "${pattern}")
do
  id=$(git rev-list -n1 ${tag})
  echo "$id $tag"
done
